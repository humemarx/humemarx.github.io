<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[神经网络]]></title>
    <url>%2F2017%2F09%2F27%2Fgan%2F</url>
    <content type="text"><![CDATA[生成对抗网络（Generative Adversarial Network，GAN）是非监督式学习的一种方法，通过让两个神经网络相互博弈的方式进行学习。他由一个生成网络与一个判别网络组成。生成网络从潜在空间（latent space）中随机采样作为输入，其输出结果需要尽量模仿训练集中的真实样本。判别网络的输入则为真实样本或生成网络的输出，其目的是将生成网络的输出从真实样本中尽可能分辨出来。而生成网络则要尽可能地欺骗判别网络。两个网络相互对抗、不断调整参数，最终目的是使判别网络无法判断生成网络的输出结果是否真实。生成对抗网络主要用于生成以假乱真的文字，图像等. TODO]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习算法</tag>
        <tag>gan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归神经网络]]></title>
    <url>%2F2017%2F09%2F27%2Frnn%2F</url>
    <content type="text"><![CDATA[递归神经网络（recurrent neural network，RNN）的神经元间连接构成矩阵，单纯递归神经网络因为无法处理随着递归，权重指数级爆炸或消失的问题（Vanishing gradient problem），难以捕捉长期时间关联；而结合不同的LSTM可以很好解决这个问题。 TODO]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习算法</tag>
        <tag>rnn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[卷积神经网络]]></title>
    <url>%2F2017%2F09%2F27%2Fcnn%2F</url>
    <content type="text"><![CDATA[卷积神经网路（Convolutional Neural Network, CNN）是一种前馈神经网络，它的人工神经元可以响应一部分覆盖范围内的周围单元，对于图像方便的识别效果尤为明显.他一般由一个或者多个卷积层组成，相比较其他深度、前馈神经网路，卷积神经网路需要考量的参数更少，使之成为一种颇具吸引力的深度学习结构 TODO]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习算法</tag>
        <tag>cnn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[神经网络]]></title>
    <url>%2F2017%2F09%2F27%2F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[在机器学习和认知科学领域，人工神经网络（artificial neural network，缩写ANN），简称神经网络（neural network，缩写NN）或类神经网络，是一种模仿生物神经网络(动物的中枢神经系统，特别是大脑)的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。神经网络由大量的人工神经元联结进行计算。 TODO]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习算法</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机森林]]></title>
    <url>%2F2017%2F09%2F27%2F%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%2F</url>
    <content type="text"><![CDATA[随机森林是表示决策树总体的一个专有名词，在随机森林算法中，我们有一系列的决策树（因此又名“森林”），为了根据一个新对象的属性将其分类，每一个决策树有一个分类，称之为这个决策树“投票”给该分类，这个森林选择获得森林里（在所有树中）获得票数最多的分类. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>随机森林</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[决策树]]></title>
    <url>%2F2017%2F09%2F27%2F%E5%86%B3%E7%AD%96%E6%A0%91%2F</url>
    <content type="text"><![CDATA[决策树算法是一种监督式的学习算法，我们通过属性相关度不断的将总体分成两个或者多个类别，最终完成决策的不同判别. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>决策树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[朴素贝叶斯]]></title>
    <url>%2F2017%2F09%2F27%2F%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%2F</url>
    <content type="text"><![CDATA[朴素贝叶斯算法主要的理论依据是贝叶斯公式，利用事件的先验概率计算后验概率.而朴素贝叶斯则是使用了一种类似的方法，分析不同的属性，预测其不同类别的概率.朴素贝叶斯模型非常简单直观，同时对于大型的数据集，往往具有出乎意料的表现. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>贝叶斯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[svm(支持向量机)]]></title>
    <url>%2F2017%2F09%2F27%2Fsvm%2F</url>
    <content type="text"><![CDATA[支持向量机(SupportVector Machines)是机器学习中极其重要的算法，在深度神经网络大红大紫之前，svm算法在模式识别领域几乎一统天下.支持向量机的基本思想非常简单，在一组给定的包含正样本和负样本的数据集中，它的目的就是寻找一个超平面将正负样本分开.理论上无论多么复杂的样本集，都存在一个高维空间，其正负样本是线性可分的. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>svm</tag>
        <tag>支持向量机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[k-means聚类]]></title>
    <url>%2F2017%2F09%2F27%2Fk-means%2F</url>
    <content type="text"><![CDATA[k-means是一种最简单的无监督学习算法，它主要解决聚类问题.同一类的数据集本质上具有相似性，而且能显著的区别于其他类别.k-means通过不断调整聚类中心，将一定距离内或者相似性的样本聚为一类. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>聚类</tag>
        <tag>k-means</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KNN算法]]></title>
    <url>%2F2017%2F09%2F27%2Fknn%2F</url>
    <content type="text"><![CDATA[KNN(k-Nearest Neighbor)算法是一种最简单直观的机器学习分类算法.它通过计算不同特征值之间的距离来对数据集进行分类. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逻辑回归]]></title>
    <url>%2F2017%2F09%2F27%2Flogistic%2F</url>
    <content type="text"><![CDATA[逻辑回归回归和线性回归的主要区别在于，逻辑回归可以进行回归预测，但最主要的应用还是二分类，逻辑回归本质上一个被logistic函数归一化后的线性回归，线性回归的输出范围在正无穷到负无穷之间，而逻辑回归的输出范围被压缩到0-1之间. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>逻辑回归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性回归]]></title>
    <url>%2F2017%2F09%2F27%2Flinear%2F</url>
    <content type="text"><![CDATA[线性回归是机器学习中的重要算法之一，其主要目的就是建立一个线性方程来预测目标值.线性回归所求解的是回归方程的回归系数. TODO]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习算法</tag>
        <tag>线性回归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
